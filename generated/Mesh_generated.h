// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESH_SE_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_MESH_SE_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

#include "Common_generated.h"

namespace SE {
namespace FlatBuffers {

struct BoundingBox;

struct VertexAttribute;

struct FloatVector;

struct ByteVector;

struct Uint32Vector;

struct Uint16Vector;

struct Uint8Vector;

struct VertexBuffer;

struct IndexBuffer;

struct Shape;

struct Mesh;

struct MeshHolder;

enum class AttribDestType : uint8_t {
  DEST_FLOAT = 1,
  DEST_INT = 2,
  MIN = DEST_FLOAT,
  MAX = DEST_INT
};

inline const AttribDestType (&EnumValuesAttribDestType())[2] {
  static const AttribDestType values[] = {
    AttribDestType::DEST_FLOAT,
    AttribDestType::DEST_INT
  };
  return values;
}

inline const char * const *EnumNamesAttribDestType() {
  static const char * const names[] = {
    "DEST_FLOAT",
    "DEST_INT",
    nullptr
  };
  return names;
}

inline const char *EnumNameAttribDestType(AttribDestType e) {
  const size_t index = static_cast<int>(e) - static_cast<int>(AttribDestType::DEST_FLOAT);
  return EnumNamesAttribDestType()[index];
}

enum class VertexBufferU : uint8_t {
  NONE = 0,
  FloatVector = 1,
  ByteVector = 2,
  Uint32Vector = 3,
  MIN = NONE,
  MAX = Uint32Vector
};

inline const VertexBufferU (&EnumValuesVertexBufferU())[4] {
  static const VertexBufferU values[] = {
    VertexBufferU::NONE,
    VertexBufferU::FloatVector,
    VertexBufferU::ByteVector,
    VertexBufferU::Uint32Vector
  };
  return values;
}

inline const char * const *EnumNamesVertexBufferU() {
  static const char * const names[] = {
    "NONE",
    "FloatVector",
    "ByteVector",
    "Uint32Vector",
    nullptr
  };
  return names;
}

inline const char *EnumNameVertexBufferU(VertexBufferU e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesVertexBufferU()[index];
}

template<typename T> struct VertexBufferUTraits {
  static const VertexBufferU enum_value = VertexBufferU::NONE;
};

template<> struct VertexBufferUTraits<FloatVector> {
  static const VertexBufferU enum_value = VertexBufferU::FloatVector;
};

template<> struct VertexBufferUTraits<ByteVector> {
  static const VertexBufferU enum_value = VertexBufferU::ByteVector;
};

template<> struct VertexBufferUTraits<Uint32Vector> {
  static const VertexBufferU enum_value = VertexBufferU::Uint32Vector;
};

bool VerifyVertexBufferU(flatbuffers::Verifier &verifier, const void *obj, VertexBufferU type);
bool VerifyVertexBufferUVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

enum class IndexBufferU : uint8_t {
  NONE = 0,
  Uint8Vector = 1,
  Uint16Vector = 2,
  Uint32Vector = 3,
  MIN = NONE,
  MAX = Uint32Vector
};

inline const IndexBufferU (&EnumValuesIndexBufferU())[4] {
  static const IndexBufferU values[] = {
    IndexBufferU::NONE,
    IndexBufferU::Uint8Vector,
    IndexBufferU::Uint16Vector,
    IndexBufferU::Uint32Vector
  };
  return values;
}

inline const char * const *EnumNamesIndexBufferU() {
  static const char * const names[] = {
    "NONE",
    "Uint8Vector",
    "Uint16Vector",
    "Uint32Vector",
    nullptr
  };
  return names;
}

inline const char *EnumNameIndexBufferU(IndexBufferU e) {
  const size_t index = static_cast<int>(e);
  return EnumNamesIndexBufferU()[index];
}

template<typename T> struct IndexBufferUTraits {
  static const IndexBufferU enum_value = IndexBufferU::NONE;
};

template<> struct IndexBufferUTraits<Uint8Vector> {
  static const IndexBufferU enum_value = IndexBufferU::Uint8Vector;
};

template<> struct IndexBufferUTraits<Uint16Vector> {
  static const IndexBufferU enum_value = IndexBufferU::Uint16Vector;
};

template<> struct IndexBufferUTraits<Uint32Vector> {
  static const IndexBufferU enum_value = IndexBufferU::Uint32Vector;
};

bool VerifyIndexBufferU(flatbuffers::Verifier &verifier, const void *obj, IndexBufferU type);
bool VerifyIndexBufferUVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

enum class PrimitiveType : uint8_t {
  GEOM_TRIANGLES = 1,
  GEOM_LINES = 2,
  GEOM_POINTS = 3,
  MIN = GEOM_TRIANGLES,
  MAX = GEOM_POINTS
};

inline const PrimitiveType (&EnumValuesPrimitiveType())[3] {
  static const PrimitiveType values[] = {
    PrimitiveType::GEOM_TRIANGLES,
    PrimitiveType::GEOM_LINES,
    PrimitiveType::GEOM_POINTS
  };
  return values;
}

inline const char * const *EnumNamesPrimitiveType() {
  static const char * const names[] = {
    "GEOM_TRIANGLES",
    "GEOM_LINES",
    "GEOM_POINTS",
    nullptr
  };
  return names;
}

inline const char *EnumNamePrimitiveType(PrimitiveType e) {
  const size_t index = static_cast<int>(e) - static_cast<int>(PrimitiveType::GEOM_TRIANGLES);
  return EnumNamesPrimitiveType()[index];
}

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) BoundingBox FLATBUFFERS_FINAL_CLASS {
 private:
  Vec3 min_;
  Vec3 max_;

 public:
  BoundingBox() {
    memset(this, 0, sizeof(BoundingBox));
  }
  BoundingBox(const Vec3 &_min, const Vec3 &_max)
      : min_(_min),
        max_(_max) {
  }
  const Vec3 &min() const {
    return min_;
  }
  const Vec3 &max() const {
    return max_;
  }
};
FLATBUFFERS_STRUCT_END(BoundingBox, 24);

struct VertexAttribute FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_NAME = 4,
    VT_OFFSET = 6,
    VT_ELEM_SIZE = 8,
    VT_BUFFER_IND = 10,
    VT_CUSTOM = 12,
    VT_DESTINATION = 14
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  uint16_t offset() const {
    return GetField<uint16_t>(VT_OFFSET, 0);
  }
  uint8_t elem_size() const {
    return GetField<uint8_t>(VT_ELEM_SIZE, 3);
  }
  uint8_t buffer_ind() const {
    return GetField<uint8_t>(VT_BUFFER_IND, 0);
  }
  uint32_t custom() const {
    return GetField<uint32_t>(VT_CUSTOM, 0);
  }
  AttribDestType destination() const {
    return static_cast<AttribDestType>(GetField<uint8_t>(VT_DESTINATION, 1));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint16_t>(verifier, VT_OFFSET) &&
           VerifyField<uint8_t>(verifier, VT_ELEM_SIZE) &&
           VerifyField<uint8_t>(verifier, VT_BUFFER_IND) &&
           VerifyField<uint32_t>(verifier, VT_CUSTOM) &&
           VerifyField<uint8_t>(verifier, VT_DESTINATION) &&
           verifier.EndTable();
  }
};

struct VertexAttributeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(VertexAttribute::VT_NAME, name);
  }
  void add_offset(uint16_t offset) {
    fbb_.AddElement<uint16_t>(VertexAttribute::VT_OFFSET, offset, 0);
  }
  void add_elem_size(uint8_t elem_size) {
    fbb_.AddElement<uint8_t>(VertexAttribute::VT_ELEM_SIZE, elem_size, 3);
  }
  void add_buffer_ind(uint8_t buffer_ind) {
    fbb_.AddElement<uint8_t>(VertexAttribute::VT_BUFFER_IND, buffer_ind, 0);
  }
  void add_custom(uint32_t custom) {
    fbb_.AddElement<uint32_t>(VertexAttribute::VT_CUSTOM, custom, 0);
  }
  void add_destination(AttribDestType destination) {
    fbb_.AddElement<uint8_t>(VertexAttribute::VT_DESTINATION, static_cast<uint8_t>(destination), 1);
  }
  explicit VertexAttributeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  VertexAttributeBuilder &operator=(const VertexAttributeBuilder &);
  flatbuffers::Offset<VertexAttribute> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<VertexAttribute>(end);
    fbb_.Required(o, VertexAttribute::VT_NAME);
    return o;
  }
};

inline flatbuffers::Offset<VertexAttribute> CreateVertexAttribute(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    uint16_t offset = 0,
    uint8_t elem_size = 3,
    uint8_t buffer_ind = 0,
    uint32_t custom = 0,
    AttribDestType destination = AttribDestType::DEST_FLOAT) {
  VertexAttributeBuilder builder_(_fbb);
  builder_.add_custom(custom);
  builder_.add_name(name);
  builder_.add_offset(offset);
  builder_.add_destination(destination);
  builder_.add_buffer_ind(buffer_ind);
  builder_.add_elem_size(elem_size);
  return builder_.Finish();
}

inline flatbuffers::Offset<VertexAttribute> CreateVertexAttributeDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    uint16_t offset = 0,
    uint8_t elem_size = 3,
    uint8_t buffer_ind = 0,
    uint32_t custom = 0,
    AttribDestType destination = AttribDestType::DEST_FLOAT) {
  return SE::FlatBuffers::CreateVertexAttribute(
      _fbb,
      name ? _fbb.CreateString(name) : 0,
      offset,
      elem_size,
      buffer_ind,
      custom,
      destination);
}

struct FloatVector FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  const flatbuffers::Vector<float> *data() const {
    return GetPointer<const flatbuffers::Vector<float> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct FloatVectorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<float>> data) {
    fbb_.AddOffset(FloatVector::VT_DATA, data);
  }
  explicit FloatVectorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  FloatVectorBuilder &operator=(const FloatVectorBuilder &);
  flatbuffers::Offset<FloatVector> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<FloatVector>(end);
    return o;
  }
};

inline flatbuffers::Offset<FloatVector> CreateFloatVector(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<float>> data = 0) {
  FloatVectorBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<FloatVector> CreateFloatVectorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<float> *data = nullptr) {
  return SE::FlatBuffers::CreateFloatVector(
      _fbb,
      data ? _fbb.CreateVector<float>(*data) : 0);
}

struct ByteVector FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct ByteVectorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(ByteVector::VT_DATA, data);
  }
  explicit ByteVectorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ByteVectorBuilder &operator=(const ByteVectorBuilder &);
  flatbuffers::Offset<ByteVector> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ByteVector>(end);
    return o;
  }
};

inline flatbuffers::Offset<ByteVector> CreateByteVector(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  ByteVectorBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<ByteVector> CreateByteVectorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr) {
  return SE::FlatBuffers::CreateByteVector(
      _fbb,
      data ? _fbb.CreateVector<uint8_t>(*data) : 0);
}

struct Uint32Vector FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  const flatbuffers::Vector<uint32_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint32_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct Uint32VectorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint32_t>> data) {
    fbb_.AddOffset(Uint32Vector::VT_DATA, data);
  }
  explicit Uint32VectorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Uint32VectorBuilder &operator=(const Uint32VectorBuilder &);
  flatbuffers::Offset<Uint32Vector> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Uint32Vector>(end);
    return o;
  }
};

inline flatbuffers::Offset<Uint32Vector> CreateUint32Vector(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint32_t>> data = 0) {
  Uint32VectorBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<Uint32Vector> CreateUint32VectorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint32_t> *data = nullptr) {
  return SE::FlatBuffers::CreateUint32Vector(
      _fbb,
      data ? _fbb.CreateVector<uint32_t>(*data) : 0);
}

struct Uint16Vector FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  const flatbuffers::Vector<uint16_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint16_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct Uint16VectorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint16_t>> data) {
    fbb_.AddOffset(Uint16Vector::VT_DATA, data);
  }
  explicit Uint16VectorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Uint16VectorBuilder &operator=(const Uint16VectorBuilder &);
  flatbuffers::Offset<Uint16Vector> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Uint16Vector>(end);
    return o;
  }
};

inline flatbuffers::Offset<Uint16Vector> CreateUint16Vector(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint16_t>> data = 0) {
  Uint16VectorBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<Uint16Vector> CreateUint16VectorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint16_t> *data = nullptr) {
  return SE::FlatBuffers::CreateUint16Vector(
      _fbb,
      data ? _fbb.CreateVector<uint16_t>(*data) : 0);
}

struct Uint8Vector FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_DATA = 4
  };
  const flatbuffers::Vector<uint8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
};

struct Uint8VectorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_data(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data) {
    fbb_.AddOffset(Uint8Vector::VT_DATA, data);
  }
  explicit Uint8VectorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Uint8VectorBuilder &operator=(const Uint8VectorBuilder &);
  flatbuffers::Offset<Uint8Vector> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Uint8Vector>(end);
    return o;
  }
};

inline flatbuffers::Offset<Uint8Vector> CreateUint8Vector(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> data = 0) {
  Uint8VectorBuilder builder_(_fbb);
  builder_.add_data(data);
  return builder_.Finish();
}

inline flatbuffers::Offset<Uint8Vector> CreateUint8VectorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *data = nullptr) {
  return SE::FlatBuffers::CreateUint8Vector(
      _fbb,
      data ? _fbb.CreateVector<uint8_t>(*data) : 0);
}

struct VertexBuffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_BUF_TYPE = 4,
    VT_BUF = 6,
    VT_STRIDE = 8
  };
  VertexBufferU buf_type() const {
    return static_cast<VertexBufferU>(GetField<uint8_t>(VT_BUF_TYPE, 0));
  }
  const void *buf() const {
    return GetPointer<const void *>(VT_BUF);
  }
  template<typename T> const T *buf_as() const;
  const FloatVector *buf_as_FloatVector() const {
    return buf_type() == VertexBufferU::FloatVector ? static_cast<const FloatVector *>(buf()) : nullptr;
  }
  const ByteVector *buf_as_ByteVector() const {
    return buf_type() == VertexBufferU::ByteVector ? static_cast<const ByteVector *>(buf()) : nullptr;
  }
  const Uint32Vector *buf_as_Uint32Vector() const {
    return buf_type() == VertexBufferU::Uint32Vector ? static_cast<const Uint32Vector *>(buf()) : nullptr;
  }
  uint8_t stride() const {
    return GetField<uint8_t>(VT_STRIDE, 32);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_BUF_TYPE) &&
           VerifyOffsetRequired(verifier, VT_BUF) &&
           VerifyVertexBufferU(verifier, buf(), buf_type()) &&
           VerifyField<uint8_t>(verifier, VT_STRIDE) &&
           verifier.EndTable();
  }
};

template<> inline const FloatVector *VertexBuffer::buf_as<FloatVector>() const {
  return buf_as_FloatVector();
}

template<> inline const ByteVector *VertexBuffer::buf_as<ByteVector>() const {
  return buf_as_ByteVector();
}

template<> inline const Uint32Vector *VertexBuffer::buf_as<Uint32Vector>() const {
  return buf_as_Uint32Vector();
}

struct VertexBufferBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_buf_type(VertexBufferU buf_type) {
    fbb_.AddElement<uint8_t>(VertexBuffer::VT_BUF_TYPE, static_cast<uint8_t>(buf_type), 0);
  }
  void add_buf(flatbuffers::Offset<void> buf) {
    fbb_.AddOffset(VertexBuffer::VT_BUF, buf);
  }
  void add_stride(uint8_t stride) {
    fbb_.AddElement<uint8_t>(VertexBuffer::VT_STRIDE, stride, 32);
  }
  explicit VertexBufferBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  VertexBufferBuilder &operator=(const VertexBufferBuilder &);
  flatbuffers::Offset<VertexBuffer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<VertexBuffer>(end);
    fbb_.Required(o, VertexBuffer::VT_BUF);
    return o;
  }
};

inline flatbuffers::Offset<VertexBuffer> CreateVertexBuffer(
    flatbuffers::FlatBufferBuilder &_fbb,
    VertexBufferU buf_type = VertexBufferU::NONE,
    flatbuffers::Offset<void> buf = 0,
    uint8_t stride = 32) {
  VertexBufferBuilder builder_(_fbb);
  builder_.add_buf(buf);
  builder_.add_stride(stride);
  builder_.add_buf_type(buf_type);
  return builder_.Finish();
}

struct IndexBuffer FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_BUF_TYPE = 4,
    VT_BUF = 6
  };
  IndexBufferU buf_type() const {
    return static_cast<IndexBufferU>(GetField<uint8_t>(VT_BUF_TYPE, 0));
  }
  const void *buf() const {
    return GetPointer<const void *>(VT_BUF);
  }
  template<typename T> const T *buf_as() const;
  const Uint8Vector *buf_as_Uint8Vector() const {
    return buf_type() == IndexBufferU::Uint8Vector ? static_cast<const Uint8Vector *>(buf()) : nullptr;
  }
  const Uint16Vector *buf_as_Uint16Vector() const {
    return buf_type() == IndexBufferU::Uint16Vector ? static_cast<const Uint16Vector *>(buf()) : nullptr;
  }
  const Uint32Vector *buf_as_Uint32Vector() const {
    return buf_type() == IndexBufferU::Uint32Vector ? static_cast<const Uint32Vector *>(buf()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_BUF_TYPE) &&
           VerifyOffsetRequired(verifier, VT_BUF) &&
           VerifyIndexBufferU(verifier, buf(), buf_type()) &&
           verifier.EndTable();
  }
};

template<> inline const Uint8Vector *IndexBuffer::buf_as<Uint8Vector>() const {
  return buf_as_Uint8Vector();
}

template<> inline const Uint16Vector *IndexBuffer::buf_as<Uint16Vector>() const {
  return buf_as_Uint16Vector();
}

template<> inline const Uint32Vector *IndexBuffer::buf_as<Uint32Vector>() const {
  return buf_as_Uint32Vector();
}

struct IndexBufferBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_buf_type(IndexBufferU buf_type) {
    fbb_.AddElement<uint8_t>(IndexBuffer::VT_BUF_TYPE, static_cast<uint8_t>(buf_type), 0);
  }
  void add_buf(flatbuffers::Offset<void> buf) {
    fbb_.AddOffset(IndexBuffer::VT_BUF, buf);
  }
  explicit IndexBufferBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  IndexBufferBuilder &operator=(const IndexBufferBuilder &);
  flatbuffers::Offset<IndexBuffer> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<IndexBuffer>(end);
    fbb_.Required(o, IndexBuffer::VT_BUF);
    return o;
  }
};

inline flatbuffers::Offset<IndexBuffer> CreateIndexBuffer(
    flatbuffers::FlatBufferBuilder &_fbb,
    IndexBufferU buf_type = IndexBufferU::NONE,
    flatbuffers::Offset<void> buf = 0) {
  IndexBufferBuilder builder_(_fbb);
  builder_.add_buf(buf);
  builder_.add_buf_type(buf_type);
  return builder_.Finish();
}

struct Shape FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_BBOX = 4,
    VT_INDEX_ELEM_START = 6,
    VT_INDEX_ELEM_COUNT = 8
  };
  const BoundingBox *bbox() const {
    return GetStruct<const BoundingBox *>(VT_BBOX);
  }
  uint32_t index_elem_start() const {
    return GetField<uint32_t>(VT_INDEX_ELEM_START, 0);
  }
  uint32_t index_elem_count() const {
    return GetField<uint32_t>(VT_INDEX_ELEM_COUNT, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyFieldRequired<BoundingBox>(verifier, VT_BBOX) &&
           VerifyField<uint32_t>(verifier, VT_INDEX_ELEM_START) &&
           VerifyField<uint32_t>(verifier, VT_INDEX_ELEM_COUNT) &&
           verifier.EndTable();
  }
};

struct ShapeBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_bbox(const BoundingBox *bbox) {
    fbb_.AddStruct(Shape::VT_BBOX, bbox);
  }
  void add_index_elem_start(uint32_t index_elem_start) {
    fbb_.AddElement<uint32_t>(Shape::VT_INDEX_ELEM_START, index_elem_start, 0);
  }
  void add_index_elem_count(uint32_t index_elem_count) {
    fbb_.AddElement<uint32_t>(Shape::VT_INDEX_ELEM_COUNT, index_elem_count, 0);
  }
  explicit ShapeBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ShapeBuilder &operator=(const ShapeBuilder &);
  flatbuffers::Offset<Shape> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Shape>(end);
    fbb_.Required(o, Shape::VT_BBOX);
    return o;
  }
};

inline flatbuffers::Offset<Shape> CreateShape(
    flatbuffers::FlatBufferBuilder &_fbb,
    const BoundingBox *bbox = 0,
    uint32_t index_elem_start = 0,
    uint32_t index_elem_count = 0) {
  ShapeBuilder builder_(_fbb);
  builder_.add_index_elem_count(index_elem_count);
  builder_.add_index_elem_start(index_elem_start);
  builder_.add_bbox(bbox);
  return builder_.Finish();
}

struct Mesh FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_INDEX = 4,
    VT_VERTICES = 6,
    VT_ATTRIBUTES = 8,
    VT_PRIMITIVE_TYPE = 10,
    VT_SHAPES = 12,
    VT_BBOX = 14
  };
  const IndexBuffer *index() const {
    return GetPointer<const IndexBuffer *>(VT_INDEX);
  }
  const flatbuffers::Vector<flatbuffers::Offset<VertexBuffer>> *vertices() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<VertexBuffer>> *>(VT_VERTICES);
  }
  const flatbuffers::Vector<flatbuffers::Offset<VertexAttribute>> *attributes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<VertexAttribute>> *>(VT_ATTRIBUTES);
  }
  PrimitiveType primitive_type() const {
    return static_cast<PrimitiveType>(GetField<uint8_t>(VT_PRIMITIVE_TYPE, 1));
  }
  const flatbuffers::Vector<flatbuffers::Offset<Shape>> *shapes() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Shape>> *>(VT_SHAPES);
  }
  const BoundingBox *bbox() const {
    return GetStruct<const BoundingBox *>(VT_BBOX);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_INDEX) &&
           verifier.VerifyTable(index()) &&
           VerifyOffsetRequired(verifier, VT_VERTICES) &&
           verifier.VerifyVector(vertices()) &&
           verifier.VerifyVectorOfTables(vertices()) &&
           VerifyOffsetRequired(verifier, VT_ATTRIBUTES) &&
           verifier.VerifyVector(attributes()) &&
           verifier.VerifyVectorOfTables(attributes()) &&
           VerifyField<uint8_t>(verifier, VT_PRIMITIVE_TYPE) &&
           VerifyOffsetRequired(verifier, VT_SHAPES) &&
           verifier.VerifyVector(shapes()) &&
           verifier.VerifyVectorOfTables(shapes()) &&
           VerifyFieldRequired<BoundingBox>(verifier, VT_BBOX) &&
           verifier.EndTable();
  }
};

struct MeshBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_index(flatbuffers::Offset<IndexBuffer> index) {
    fbb_.AddOffset(Mesh::VT_INDEX, index);
  }
  void add_vertices(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<VertexBuffer>>> vertices) {
    fbb_.AddOffset(Mesh::VT_VERTICES, vertices);
  }
  void add_attributes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<VertexAttribute>>> attributes) {
    fbb_.AddOffset(Mesh::VT_ATTRIBUTES, attributes);
  }
  void add_primitive_type(PrimitiveType primitive_type) {
    fbb_.AddElement<uint8_t>(Mesh::VT_PRIMITIVE_TYPE, static_cast<uint8_t>(primitive_type), 1);
  }
  void add_shapes(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Shape>>> shapes) {
    fbb_.AddOffset(Mesh::VT_SHAPES, shapes);
  }
  void add_bbox(const BoundingBox *bbox) {
    fbb_.AddStruct(Mesh::VT_BBOX, bbox);
  }
  explicit MeshBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MeshBuilder &operator=(const MeshBuilder &);
  flatbuffers::Offset<Mesh> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Mesh>(end);
    fbb_.Required(o, Mesh::VT_INDEX);
    fbb_.Required(o, Mesh::VT_VERTICES);
    fbb_.Required(o, Mesh::VT_ATTRIBUTES);
    fbb_.Required(o, Mesh::VT_SHAPES);
    fbb_.Required(o, Mesh::VT_BBOX);
    return o;
  }
};

inline flatbuffers::Offset<Mesh> CreateMesh(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<IndexBuffer> index = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<VertexBuffer>>> vertices = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<VertexAttribute>>> attributes = 0,
    PrimitiveType primitive_type = PrimitiveType::GEOM_TRIANGLES,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Shape>>> shapes = 0,
    const BoundingBox *bbox = 0) {
  MeshBuilder builder_(_fbb);
  builder_.add_bbox(bbox);
  builder_.add_shapes(shapes);
  builder_.add_attributes(attributes);
  builder_.add_vertices(vertices);
  builder_.add_index(index);
  builder_.add_primitive_type(primitive_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Mesh> CreateMeshDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<IndexBuffer> index = 0,
    const std::vector<flatbuffers::Offset<VertexBuffer>> *vertices = nullptr,
    const std::vector<flatbuffers::Offset<VertexAttribute>> *attributes = nullptr,
    PrimitiveType primitive_type = PrimitiveType::GEOM_TRIANGLES,
    const std::vector<flatbuffers::Offset<Shape>> *shapes = nullptr,
    const BoundingBox *bbox = 0) {
  return SE::FlatBuffers::CreateMesh(
      _fbb,
      index,
      vertices ? _fbb.CreateVector<flatbuffers::Offset<VertexBuffer>>(*vertices) : 0,
      attributes ? _fbb.CreateVector<flatbuffers::Offset<VertexAttribute>>(*attributes) : 0,
      primitive_type,
      shapes ? _fbb.CreateVector<flatbuffers::Offset<Shape>>(*shapes) : 0,
      bbox);
}

struct MeshHolder FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_MESH = 4,
    VT_PATH = 6,
    VT_NAME = 8
  };
  const Mesh *mesh() const {
    return GetPointer<const Mesh *>(VT_MESH);
  }
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_MESH) &&
           verifier.VerifyTable(mesh()) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           verifier.EndTable();
  }
};

struct MeshHolderBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_mesh(flatbuffers::Offset<Mesh> mesh) {
    fbb_.AddOffset(MeshHolder::VT_MESH, mesh);
  }
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(MeshHolder::VT_PATH, path);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(MeshHolder::VT_NAME, name);
  }
  explicit MeshHolderBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MeshHolderBuilder &operator=(const MeshHolderBuilder &);
  flatbuffers::Offset<MeshHolder> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MeshHolder>(end);
    return o;
  }
};

inline flatbuffers::Offset<MeshHolder> CreateMeshHolder(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Mesh> mesh = 0,
    flatbuffers::Offset<flatbuffers::String> path = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0) {
  MeshHolderBuilder builder_(_fbb);
  builder_.add_name(name);
  builder_.add_path(path);
  builder_.add_mesh(mesh);
  return builder_.Finish();
}

inline flatbuffers::Offset<MeshHolder> CreateMeshHolderDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<Mesh> mesh = 0,
    const char *path = nullptr,
    const char *name = nullptr) {
  return SE::FlatBuffers::CreateMeshHolder(
      _fbb,
      mesh,
      path ? _fbb.CreateString(path) : 0,
      name ? _fbb.CreateString(name) : 0);
}

inline bool VerifyVertexBufferU(flatbuffers::Verifier &verifier, const void *obj, VertexBufferU type) {
  switch (type) {
    case VertexBufferU::NONE: {
      return true;
    }
    case VertexBufferU::FloatVector: {
      auto ptr = reinterpret_cast<const FloatVector *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case VertexBufferU::ByteVector: {
      auto ptr = reinterpret_cast<const ByteVector *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case VertexBufferU::Uint32Vector: {
      auto ptr = reinterpret_cast<const Uint32Vector *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyVertexBufferUVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyVertexBufferU(
        verifier,  values->Get(i), types->GetEnum<VertexBufferU>(i))) {
      return false;
    }
  }
  return true;
}

inline bool VerifyIndexBufferU(flatbuffers::Verifier &verifier, const void *obj, IndexBufferU type) {
  switch (type) {
    case IndexBufferU::NONE: {
      return true;
    }
    case IndexBufferU::Uint8Vector: {
      auto ptr = reinterpret_cast<const Uint8Vector *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case IndexBufferU::Uint16Vector: {
      auto ptr = reinterpret_cast<const Uint16Vector *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case IndexBufferU::Uint32Vector: {
      auto ptr = reinterpret_cast<const Uint32Vector *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyIndexBufferUVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyIndexBufferU(
        verifier,  values->Get(i), types->GetEnum<IndexBufferU>(i))) {
      return false;
    }
  }
  return true;
}

inline const SE::FlatBuffers::Mesh *GetMesh(const void *buf) {
  return flatbuffers::GetRoot<SE::FlatBuffers::Mesh>(buf);
}

inline const SE::FlatBuffers::Mesh *GetSizePrefixedMesh(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<SE::FlatBuffers::Mesh>(buf);
}

inline const char *MeshIdentifier() {
  return "SEMS";
}

inline bool MeshBufferHasIdentifier(const void *buf) {
  return flatbuffers::BufferHasIdentifier(
      buf, MeshIdentifier());
}

inline bool VerifyMeshBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<SE::FlatBuffers::Mesh>(MeshIdentifier());
}

inline bool VerifySizePrefixedMeshBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<SE::FlatBuffers::Mesh>(MeshIdentifier());
}

inline const char *MeshExtension() {
  return "sems";
}

inline void FinishMeshBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SE::FlatBuffers::Mesh> root) {
  fbb.Finish(root, MeshIdentifier());
}

inline void FinishSizePrefixedMeshBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<SE::FlatBuffers::Mesh> root) {
  fbb.FinishSizePrefixed(root, MeshIdentifier());
}

}  // namespace FlatBuffers
}  // namespace SE

#endif  // FLATBUFFERS_GENERATED_MESH_SE_FLATBUFFERS_H_
