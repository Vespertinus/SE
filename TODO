
[Misc]

динамическое связывание камеры с классом перемещения.
width & height перенести из камеры в viewport
написать корректную обработку ESC для нормального выхода из программы.

[Camera]

учет поворота камеры при зажатых кнопках перемещения (wsad)
кривые (path) для камеры
различные IPO каналы для анимации камеры
оптические свойства камеры, апертура, fov, кол-во лепестков etc
привязка к объекту.
посмотреть на объект.

x ->
y 
z ^

[Time]

игровое время
внутреннее время
FPS
переносимые таймеры
Qt timers?

[Math]

написать мини библиотеку для работы с тригонометрией. sin, cos по таблицам
работу с Quaternion'ами и векторами. (QuadQuaternions on GPU)
преобразования из градусов в радианы.

BaseMath -> vec, quat, matr, tables and conversions

[GUI]

Начать прикручивать CEGUI
разобраться с шаблонами(кажется xml) в CEGUI

[Texture]
параметры:
тип загружаемого файла (jpg, png, tga)
тип хранимых данных (без сжатия, с сжатием, возможно добавить несколько форматов DXT1, DXT3?)
data type - mem, video, both, none

2 списка типов с допустимими стратегиями по загрузке файлов и по способу хранения.
по 2м входящим типам генерируется тип настроек
в Load из входного типа настроек определяются тип для загрузки и тип для хранения данных. Возможно использовать Александресковские иерархии? пока можно использовать промежуточный холдер в котором будут типы настроек и данные с настройками, далее обычным IndexOf<TList1, typename holder::A::ParentType> можно будет проверить корректность типов обработчиков 

Resource <StoreStrategyList, LoadStrategyList> ...
            typedef StoreList;
            typedef LoadStrategyList;
            SettingsType <StoreStrategy::Settings, LoadStrategy::Settings> ConcreateSettings;
              check StoreStrategy in StoreStrategyList;
              check LoadStrategy  in LoadStrategyList;
            fill settings
            call Create<Resource>(name, oConcreateSettings)
              check Resource in ResourceList
              check ConcreateSettings with StoreStrategy in StoreStrategyList, LoadStrategy in LoadStrategyList
              call Resource::Load(name, oConcreateSettings);

              ::Load<StoreSettings & LoadStrategySettings>();

сделать шаблончик облегчающий создание конкретного типа настроек текстуры, на основе ResourceHolder::SettingsType

[ResourceManager]
разбито по видом, типы определяются на этапе компиляции списком типов и обработчиков.
Mesh, Texture, Material, Particles(???), Sound, Skeleton bones, Shaders, ...?
Основные свойства:
  - исключение дублирования ресурсов
  - ограничение занимаемой памяти
  - LRU популярных ресурсов. Возможность блокировать некоторые ресурсы от выгружения из памяти.
  - загрузка и выгрузка ресурсов по запросу.
  - sptr, как напишу аллокатор, добавить его использование

  ResourceManager
    <- TypeList < Resorce types>, все типы ресурсов не должны быть шаблонными!
    General iface
      Load,
      Unload
      Get (Name) ? OID 
    settings for each resource types
      Set mem limit

поддержка груп?



- упростить инициализацию ресурсов. первые стратегии в списках, считаются стратегиями по умолчанию.
- Добавить авто построение настроек для конкретных ресурсов.

- заменить OIS на SDL2, или glfw...?
- ResourceManager создает объекты по пути или из данных (процедурно)
- ResourceMap (Cache\Dict) держит список package'й, директорий и т.п. откуда какой ресурс брать по rid
-- вызывает ResourceManager::Create после того как по id нашел соответствующий путь и возвращает готовый Resource

- маска uint32_t внутри mesh с битиками описывающими формат вершины - pos, normal, etc
-- будет полезно при объединении нескольких vbo в один, с общим форматом.

- план:
-- material | instances
--- blocks: material, transform (obj), lighting, etc..
---- кто проставляет остальные блоки.
--- для clone можно хранить uint16_t clone_call_cnt внутри resource base - и делать +1 каждый вызов clone, затем использовать его как имя ресурса.
-- EGL
-- resource manager + shared_ptr + unload
-- st as service
-- dds textures
-- SDL2
--- input manager | listener
-- EventManager
-- Node \ Component:
--- id
--- mem management
--- custom components from list


- различать name и path в ресурсах, path уникален, не нужно доп проверок, name уникален только в рамках файла, при создании ресурса нужно добавлять к нему уникальный префикс от имени файла..
