type: VERTEX
source:
 - |
        #version 150

        in vec4 Position;

        uniform samplerBuffer BufferTex;
        uniform mat4 MVPMatrix;
        uniform mat4 MVMatrix;
        //TODO rewrite after switching on uniform buffers
        uniform float BS_1W;
        uniform float BS_2W;
        uniform float BS_3W;

        const int channels_cnt = 3;

        void main() {

                vec3 bs1;
                vec3 bs2;
                vec3 bs3;

                bs1.x = texelFetch(BufferTex, (gl_VertexID * 3 * channels_cnt) + 0).x;
                bs1.y = texelFetch(BufferTex, (gl_VertexID * 3 * channels_cnt) + 1).x;
                bs1.z = texelFetch(BufferTex, (gl_VertexID * 3 * channels_cnt) + 2).x;

                bs2.x = texelFetch(BufferTex, (gl_VertexID * 3 * channels_cnt) + 3 + 0).x;
                bs2.y = texelFetch(BufferTex, (gl_VertexID * 3 * channels_cnt) + 3 + 1).x;
                bs2.z = texelFetch(BufferTex, (gl_VertexID * 3 * channels_cnt) + 3 + 2).x;

                bs3.x = texelFetch(BufferTex, (gl_VertexID * 3 * channels_cnt) + 6 + 0).x;
                bs3.y = texelFetch(BufferTex, (gl_VertexID * 3 * channels_cnt) + 6 + 1).x;
                bs3.z = texelFetch(BufferTex, (gl_VertexID * 3 * channels_cnt) + 6 + 2).x;

                vec4 BlendedPosition = vec4(BS_1W * bs1, 1) + vec4(BS_2W * bs2, 1) + vec4(BS_3W * bs3, 1) + Position;

                gl_Position = MVPMatrix * (MVMatrix * BlendedPosition);
        }
