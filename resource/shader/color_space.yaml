type: FRAGMENT
source:
 - |

        #version 130
        //based on http://www.chilliant.com/rgb2hsv.html

        const float Epsilon = 1e-10;

        vec3 HUE2RGB(float hue) {
                return clamp(vec3(abs(
                                        hue * 6 - 3) - 1,
                                        2 - abs(hue * 6 - 2),
                                        2 - abs(hue * 6 - 4)
                                 ),
                                0,
                                1);
        }

        vec3 RGB2HCV(vec3 RGBColor) {
                vec4 P = (RGBColor.g < RGBColor.b) ?
                        vec4(RGBColor.bg, -1.0, 2.0 / 3.0) :
                        vec4(RGBColor.gb, 0.0, -1.0 / 3.0);

                vec4 Q = (RGBColor.r < P.x) ? vec4(P.xyw, RGBColor.r) : vec4(RGBColor.r, P.yzx);
                float C = Q.x - min(Q.w, Q.y);
                float H = abs((Q.w - Q.y) / (6 * C + Epsilon) + Q.z);
                return vec3(H, C, Q.x);
        }

        vec3 HSL2RGB(vec3 HSLColor) {
                vec3 RGBColor = HUE2RGB(HSLColor.x);
                float C = (1 - abs(2 * HSLColor.z - 1)) * HSLColor.y;
                return (RGBColor - 0.5) * C + HSLColor.z;
        }

        vec3 RGB2HSL(vec3 RGBColor) {
                vec3 HCVColor    = RGB2HCV(RGBColor);
                float L  = HCVColor.z - HCVColor.y * 0.5;
                float Saturation = HCVColor.y / (1 - abs(L * 2 - 1) + Epsilon);
                return vec3(HCVColor.x, Saturation, L);
        }

        vec3 HSV2RGB(vec3 HSVColor) {
                vec3 RGBColor = HUE2RGB(HSVColor.x);
                return ((RGBColor - 1) * HSVColor.y + 1) * HSVColor.z;
        }

        vec3 RGB2HSV(vec3 RGBColor) {
                vec3 HCVColor = RGB2HCV(RGBColor);
                float S = HCVColor.y / (HCVColor.z + Epsilon);
                return vec3(HCVColor.x, S, HCVColor.z);
        }

